[{"title":"Build your own API endpoint with Apollo GraphQL","url":"/2019/11/build-api-endpoint-with-apollo-graphql.html","content":"\n### The beginning\nNowadays to a F2Eâ€™s(aka. Front End Engineer) skills are way more complex than 3 or 4 years ago, you canâ€™t just know how to process a bunch of PSDs into html but also have to make your pages works together, especially when you are creating a Web APP.\n\nTo make an APP work weâ€™ll need the API endpoint to provide necessary data so F2E can display/manipulate them and make APP alive.\nHere Iâ€™ll demonstrate of how to use GraphQL to create the endpoint, itâ€™s a bit related to backend stuff but no worries.\n\n\n### Preparation\n* Nodejs@^8.15.1\n* ES6 syntax knowledge\n* nodemon (optional)\n* Packages\n  * apollo-server-express@^2.9.7\n  * express@^4.17.1\n  * faker@^4.1.0\n  * graphql-tools@^4.0.6\n  * morgan@^1.9.1\n\n### Initial a NPM project\n<!-- more -->\n```bash\n> md example && \"$_\"\n> npm init\n> npm install apollo-server-express express faker graphql-tools morgan\n```\n\nInstall packages and letâ€™s check the directory structures:\n```\nâ”œâ”€â”€ src\nâ”‚   â”œâ”€â”€ app\nâ”‚   â”‚   â”œâ”€â”€ apollo.js\nâ”‚   â”‚   â””â”€â”€ server.js\nâ”‚   â””â”€â”€ schemas\nâ”‚       â”œâ”€â”€ index.js\nâ”‚       â”œâ”€â”€ user.js\nâ”‚       â”œâ”€â”€ ...\n```\nWe have a folder named **_app_** and a folder named **_schemas_** there will be our codesâ€™ houses then.\n\n### Coding\nStep one, create a server to handle http requests, we are going to use express to do this.\n\nTo use GraphQL in backend we can choose [Apollo Server](https://github.com/apollographql/apollo-server/tree/master/packages/apollo-server-express){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}, it is a community-maintained open-source GraphQL server, and its example to Express is sample but for the reason of decoupling to modules we will have one **_apollo.js_** and another is **_server.js_**.\n\nAs you can see we have decoupled apollo part to **_apollo.js_**, in this file we only configure express:\n* Use an express plugin called morgan to display serverâ€™s log in terminal console.\n* Module apollo applied as a middleware to express.\n* Server listen to port 4000 and when server start display a log shows server is ready.\n\n#### Codesandbox\n\n<iframe\n  src=\"https://codesandbox.io/embed/hopeful-banzai-4ex35?fontsize=14&hidenavigation=1&module=%2Fsrc%2Fapp%2Fserver.js&theme=dark\"\n  style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n  title=\"hopeful-banzai-4ex35\"\n  allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb\"\n  sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\n></iframe>\n\n```\n> npm start\n> nodemon --watch \"src/**/*.js\" --exec node ./src/app/server.js\n\n[nodemon] 1.19.4\n[nodemon] to restart at any time, enter `rs`\n[nodemon] watching dir(s): src/**/*.js\n[nodemon] watching extensions: js,mjs,json\n[nodemon] starting `node ./src/app/server.js`\nðŸš€ Server ready at http://localhost:4000/graphql\n```\n\nBefore we start the server lets finish **_apollo.js_** now.\n\nHmm, seems nothing special just import modules and export module but letâ€™s remember the context and continue discover folder **_schemas_**.\n\n### GraphQL type definition and resolvers.\n```javascript\nconst typeDefs = `\n  type User {\n    id: String\n    first_name: String\n    last_name: String\n    email(isReplace: Boolean = true): String\n    gender: String\n    phone: String\n    home: Address\n    work: Address\n  }\n\n  type Address {\n    postal: String\n    city: String\n    street: String\n    secondary: String\n    country: String\n    country_code: String\n    state: String\n    state_abbr: String\n  }\n\n  type Query {\n    users(count: Int): [User]\n  }\n`;\n```\n\nIn GraphQL type definition we create two custom types named **_User_** and **_Address_** and Query is the default type every typeDefs need one.\n\nWe add fields to each type and restrict its value as String or **_Address_** so we know filed can be a custom type and its value will be the custom typeâ€™s fields as an Object.\n\nAlso the filed could have arguments and be restricted.\n\nFor the default Query type we also have a field **_users_** and the value is a list of **_User_**. This filed will return users we have and could be an array of object/null or null because we donâ€™t restrict the list or User to be required which represent in code would be ```[User]!``` Or ```[User!]```.\n\n```javascript\nconst { always, replace, when } = require('ramda');\n\nconst resolvers = {\n  Query: {\n    users: (parent, { count = 10 }, { faker }) =>\n      new Array(count).fill().map(() => ({\n        id: faker.random.uuid(),\n        first_name: faker.name.firstName(),\n        last_name: faker.name.lastName(),\n        email: ({ isReplace }) =>\n          when(always(isReplace), replace('@', ' AT '))(faker.internet.email()),\n        gender: faker.random.arrayElement(['female', 'male']),\n        phone: faker.phone.phoneNumber(),\n        home: () => ({\n          postal: faker.address.zipCode(),\n          city: faker.address.city(),\n          street: faker.address.streetAddress(),\n          secondary: faker.address.secondaryAddress(),\n          country: faker.address.country(),\n          country_code: faker.address.countryCode(),\n          state: faker.address.state(),\n          state_abbr: faker.address.stateAbbr(),\n        }),\n      })),\n  },\n};\n```\n\nLook at **_resolvers_** carefully isnâ€™t it an Object to you, it has a key named Query and a sub-key named users like the type we defined in **_typeDefs_**, the function of users will be the resolver for generating users data â€“ an array of objects.\n\nLoot at the functionâ€™s parameters, the second one comes from request variables the third one comes from apollo-serverâ€™s **_context_** we pass before.\n\n### Playground\nNow start server by\n```bash\n> npm start\n```\nAnd using these queries to get your users.\n\n```graphql\nquery Users($count: Int!, $isReplace: Boolean){\n  users(count: $count) {\n    first_name\n    last_name\n    email(isReplace: $isReplace)\n    gender\n    phone\n  }\n}\n```\n\nHave fun with them!\n","tags":["pld","nodejs","graphql","express","apollo-server"],"categories":["GraphQL"]},{"title":"React Apollo Hooks Testing in Real World","url":"/2019/10/react-hooks-testing-of-react-apollo.html","content":"\n### A Real World hooks and hooks test\nI am using [countries.trevorblades.com](https://countries.trevorblades.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"} to query data and you can find other possible public graphql endpoints [here](https://countries.trevorblades.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}.\n\nI've made a [codesandbox](https://codesandbox.io/s/react-apollo-hooks-with-mutation-test-n5xew){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"} but it's not working in it please take in the local env to run.\n\nFYI: Since the endpoint only provide Query so only _useQuery_ hooks test is real but the _useMutation_ is only for testing.\n\n<!-- more -->\n\nFirst we need to wrap components into ApolloProvider\n```javascript\n// index.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-boost';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\nimport './index.css';\nimport App from './App';\n\nconst cache = new InMemoryCache();\n\n// http://apis.guru/graphql-apis/\nconst client = new ApolloClient({\n    uri: 'https://countries.trevorblades.com/',\n    cache,\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById('root')\n);\n```\n\nThen create a component to get continents data from endpoint and display\n```javascript\n// Continents.js\nimport React, { memo, useState } from 'react';\n\nimport { useContinents, useContinentByCode } from './hooks/useContinents';\n\nconst ContinentByCode = memo(({ code }) => {\n    const { data: { continent } = {}, loading } = useContinentByCode(code);\n\n    if (loading) {\n        return <p>Loading...</p>\n    }\n\n    return (\n        <>\n            <div>Selected: {continent.name}</div>\n            <div>Countries</div>\n            <ul>\n                {continent.countries.map(({ name }, index) => (\n                    <li key={index}>{name}</li>\n                ))}\n            </ul>\n        </>\n    )\n})\n\nexport default memo(() => {\n    const { data: { continents } = {}, loading, error } = useContinents();\n    const [continentCode, setContinentCode] = useState(null);\n\n    if (loading) {\n        return <p>Loading...</p>\n    }\n\n    if (error) {\n        return <p>Error in request graphql.</p>\n    }\n\n    return (\n        <div className=\"App-Continents-container\">\n            <div className=\"App-Continents\">\n                {continents.map(({ code, name }, index) => (\n                    <div key={index}>\n                        {code === continentCode ? name : <button onClick={() => setContinentCode(code)}>{name}</button>}\n                    </div>\n                ))}\n            </div>\n            {continentCode && (\n                <ContinentByCode code={continentCode} />\n            )}\n        </div>\n    )\n})\n```\n\nNow the apollo hooks\n```javascript\n// hooks/useContinents.js\nimport { useQuery } from 'react-apollo';\nimport { loader } from 'graphql.macro';\n\nconst queryContinents = loader('src/queries/Continents.graphql');\n\nconst queryContinent = loader('src/queries/ContinentByCode.graphql');\n\nexport const useContinents = () => useQuery(queryContinents);\n\nexport const useContinentByCode = code => useQuery(queryContinent, { variables: { code } });\n```\n\nMaybe try in the browser see if the app can run and give you seven continents.\n> npm start\n\n\n### useQuery hooks test\n```javascript\nimport React from 'react';\n// use MockedProvider to wrap component to provide mock data to components which using apollo hooks\nimport { MockedProvider } from '@apollo/react-testing';\nimport { renderHook } from '@testing-library/react-hooks';\nimport { loader } from 'graphql.macro';\n\nimport { useContinents, useContinentByCode } from './useContinents';\n\nconst queryContinents = loader('src/queries/Continents.graphql');\n\nconst queryContinent = loader('src/queries/ContinentByCode.graphql');\n\ndescribe('useContinents', () => {\n    it('get all continents', async () => {\n        const data = {\n            continents: [\n                {\n                    code: 'foo',\n                    name: 'bar',\n                },\n            ],\n        };\n\n        const mocks = [\n            {\n                request: { query: queryContinents },\n                result: { data },\n            },\n        ];\n\n        const wrapper = ({ children }) => (\n            // addTypename false will not return __typename\n            // so don't need to add __typename in mock data\n            <MockedProvider mocks={mocks} addTypename={false}>{children}</MockedProvider>\n        );\n\n        // use renderHook to render hook only and test result\n        const { result, waitForNextUpdate } = renderHook(() => useContinents(), {\n            wrapper,\n        });\n\n        expect(result.current.loading).toBe(true);\n\n        // for async result\n        await waitForNextUpdate();\n\n        expect(result.current.data).toEqual(expect.objectContaining(data));\n    })\n\n    it('get continent \"FOO\" all countries', async () => {\n        const data = {\n            continent: {\n                code: 'FOO',\n                name: 'bar',\n                countries: [\n                    {\n                        code: 'foo1',\n                        name: 'foo1.bar',\n                        continent: {\n                            name: 'bar',\n                            __typename: 'Continent'\n                        },\n                        languages: [\n                            {\n                                code: 'fooo',\n                                name: 'Barr',\n                                __typename: 'Language'\n                            }\n                        ],\n                        native: 'foo.bar',\n                        phone: '123',\n                        __typename: 'Country',\n                    }\n                ],\n                __typename: 'Continent'\n            },\n        };\n\n        const mocks = [\n            {\n                request: {\n                    query: queryContinent,\n                    variables: {\n                        code: 'FOO',\n                    },\n                },\n                result: { data },\n            },\n        ];\n\n        const wrapper = ({ children }) => (\n            <MockedProvider mocks={mocks}>{children}</MockedProvider>\n        );\n\n        const { result, waitForNextUpdate } = renderHook(() => useContinentByCode('FOO'), {\n            wrapper,\n        });\n\n        expect(result.current.loading).toBe(true);\n\n        await waitForNextUpdate();\n\n        expect(result.current.data).toEqual(expect.objectContaining(data));\n    })\n})\n```\n\nNext part will be useMutation testing.\n\n[Part II](/2019/10/react-hooks-testing-of-react-apollo-mutation.html){data-pjax}\n","tags":["pld","react","hooks","testing","apollo","graphql","mutation"],"categories":["React"]},{"title":"React Apollo Hooks Testing in Real World - Mutation","url":"/2019/10/react-hooks-testing-of-react-apollo-mutation.html","content":"\n[Part I](/2019/10/react-hooks-testing-of-react-apollo.html){data-pjax}\n\n### A Real World hooks and hooks test part II - useMutation\nI am using [countries.trevorblades.com](https://countries.trevorblades.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"} to query data and you can find other possible public graphql endpoints [here](https://countries.trevorblades.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}.\n\nI've made a [codesandbox](https://codesandbox.io/s/react-apollo-hooks-with-mutation-test-n5xew){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"} but it's not working in it please take in the local env to run.\n\nFYI: Since the endpoint only provide Query so only _useQuery_ hooks test is real but the _useMutation_ is only for testing.\n\n<!-- more -->\n\n### Mutation is CUD\nMutation is Creating, Updating and Deleting, you don't need a backend database but [fake the response](https://github.com/notrab/fakerql){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}. To fake the response thats when you define the graphql schema and use resolver to fake and schema part is out of this post's scope.\n\n### Mutation hooks\n```javascript\nimport { useMutation } from 'react-apollo';\nimport { loader } from 'graphql.macro';\n\nconst Continent = loader('src/queries/Continents.graphql');\nconst AddContinent = loader('src/queries/AddContinent.graphql');\nconst UpdateContinent = loader('src/queries/UpdateContinent.graphql');\nconst RemoveContinent = loader('src/queries/RemoveContinent.graphql');\n\nexport const useAddContinent = () => useMutation(AddContinent, {\n    update: (cache, { data: { addContinent: continent } }) => {\n        const { continents } = cache.readQuery({ query: Continent });\n\n        // add just added continent to cache\n        continents.push(continent);\n\n        cache.writeQuery({\n            query: Continent,\n            data: { continents }\n        });\n    }\n});\n\nexport const useUpdateContinent = () => useMutation(UpdateContinent, {\n    update: (cache, { data: { updateContinent: continent } }) => {\n        const { continents } = cache.readQuery({ query: Continent });\n\n        // update continent to cache\n        continents[continent.index] = continent;\n\n        cache.writeQuery({\n            query: Continent,\n            data: { continents }\n        });\n    }\n});\n\nexport const useRemoveContinent = () => useMutation(RemoveContinent, {\n    update: (cache, { data: { removeContinent: index } }) => {\n        const { continents } = cache.readQuery({ query: Continent });\n\n        // remove a continent from cache\n        continents.splice(index, 1);\n\n        cache.writeQuery({\n            query: Continent,\n            data: { continents }\n        });\n    }\n});\n```\n\n### Mutation hooks tests\n```javascript\nimport React from 'react';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { renderHook } from '@testing-library/react-hooks';\nimport { MockedProvider } from '@apollo/react-testing';\nimport { loader } from 'graphql.macro';\n\nimport { useContinents } from './useContinents';\n\nimport {\n  useAddContinent,\n  useUpdateContinent,\n  useRemoveContinent,\n} from './useMutation';\n\nconst Continents = loader('src/queries/Continents.graphql');\nconst AddContinent = loader('src/queries/AddContinent.graphql');\nconst UpdateContinent = loader('src/queries/UpdateContinent.graphql');\nconst RemoveContinent = loader('src/queries/RemoveContinent.graphql');\n\nconst allContinents = [\n    {\n        code: 'AF',\n        name: 'Africa',\n        __typename: 'Continent'\n    },\n];\n\ndescribe('useMutation', () => {\n    it('add a continent', async () => {\n        // start a mock cache\n        const cache = new InMemoryCache().restore({\n            continents: [ ...allContinents ],\n        });\n\n        const variables = {\n            code: 'FOO',\n            name: 'FOO.BAR',\n        };\n\n        const mocks = [\n            {\n                request: { query: Continents },\n                result: {\n                    data: {\n                        continents: [ ...allContinents ],\n                    },\n                },\n            },\n            {\n            request: {\n                query: AddContinent,\n                variables,\n            },\n            result: {\n                data: {\n                    addContinent: {\n                        code: 'FOO',\n                        name: 'FOO.BAR',\n                        __typename: 'Continent'\n                    },\n                },\n            },\n            },\n        ];\n\n        const wrapper = ({ children }) => (\n            <MockedProvider cache={cache} mocks={mocks}>\n            {children}\n            </MockedProvider>\n        );\n\n        // run the query first\n        const { waitForNextUpdate: continentsWaitForNextUpdate } = renderHook(\n            () => useContinents(),\n            {\n                wrapper,\n            }\n        );\n\n        const { result, waitForNextUpdate } = renderHook(\n            () => useAddContinent(),\n            {\n                wrapper,\n            }\n        );\n\n        await continentsWaitForNextUpdate();\n\n        const [addContinent] = result.current;\n\n        // run the add mutation\n        addContinent({ variables });\n\n        const [, { loading }] = result.current;\n\n        expect(loading).toBe(true);\n\n        await waitForNextUpdate();\n\n        const [, { data }] = result.current;\n\n        expect(data).toEqual(\n            expect.objectContaining({\n                addContinent: {\n                    code: 'FOO',\n                    name: 'FOO.BAR',\n                    __typename: 'Continent'\n                },\n            })\n        );\n\n        // read the cache after mutation also manipulating cache\n        const results = cache.readQuery({ query: Continents });\n\n        expect(results).toEqual(\n            expect.objectContaining({\n                continents: [\n                    ...allContinents,\n                    {\n                        code: 'FOO',\n                        name: 'FOO.BAR',\n                        __typename: 'Continent'\n                    }\n                ],\n            })\n        );\n    });\n\n    it('update a continent', async () => {\n        const cache = new InMemoryCache().restore({\n            continents: [ ...allContinents ],\n        });\n\n        const variables = {\n            index: 0,\n            code: 'FOO',\n            name: 'FOO.BAR',\n        };\n\n        const mocks = [\n            {\n                request: { query: Continents },\n                result: {\n                    data: {\n                        continents: [ ...allContinents ],\n                    },\n                },\n            },\n            {\n            request: {\n                query: UpdateContinent,\n                variables,\n            },\n            result: {\n                data: {\n                    updateContinent: {\n                        index: 0,\n                        code: 'FOO',\n                        name: 'FOO.BAR',\n                        __typename: 'Continent',\n                    },\n                },\n            },\n            },\n        ];\n\n        const wrapper = ({ children }) => (\n            <MockedProvider cache={cache} mocks={mocks}>\n            {children}\n            </MockedProvider>\n        );\n\n        const { waitForNextUpdate: continentsWaitForNextUpdate } = renderHook(\n            () => useContinents(),\n            {\n                wrapper,\n            }\n        );\n\n        const { result, waitForNextUpdate } = renderHook(\n            () => useUpdateContinent(),\n            {\n                wrapper,\n            }\n        );\n\n        await continentsWaitForNextUpdate();\n\n        const [updateContinent] = result.current;\n\n        updateContinent({ variables });\n\n        const [, { loading }] = result.current;\n\n        expect(loading).toBe(true);\n\n        await waitForNextUpdate();\n\n        const [, { data }] = result.current;\n\n        expect(data).toEqual(\n            expect.objectContaining({\n                updateContinent: {\n                    index: 0,\n                    code: 'FOO',\n                    name: 'FOO.BAR',\n                    __typename: 'Continent',\n                },\n            })\n        );\n\n        const results = cache.readQuery({ query: Continents });\n\n        const updatedContinents = [ ...allContinents ];\n        updatedContinents[0] = {\n            code: 'FOO',\n            name: 'FOO.BAR',\n            __typename: 'Continent',\n        };\n\n        expect(results).toEqual(\n            expect.objectContaining({\n                continents: [\n                    ...updatedContinents\n                ],\n            })\n        );\n    });\n\n    it('remove a continent', async () => {\n        const cache = new InMemoryCache().restore({\n            continents: [ ...allContinents ],\n        });\n\n        const variables = { index: 0 };\n\n        const mocks = [\n            {\n                request: { query: Continents },\n                result: {\n                    data: {\n                        continents: [ ...allContinents ],\n                    },\n                },\n            },\n            {\n            request: {\n                query: RemoveContinent,\n                variables,\n            },\n            result: {\n                data: {\n                    removeContinent: 0,\n                },\n            },\n            },\n        ];\n\n        const wrapper = ({ children }) => (\n            <MockedProvider cache={cache} mocks={mocks}>\n            {children}\n            </MockedProvider>\n        );\n\n        const { waitForNextUpdate: continentsWaitForNextUpdate } = renderHook(\n            () => useContinents(),\n            {\n                wrapper,\n            }\n        );\n\n        const { result, waitForNextUpdate } = renderHook(\n            () => useRemoveContinent(),\n            {\n                wrapper,\n            }\n        );\n\n        await continentsWaitForNextUpdate();\n\n        const [removeContinent] = result.current;\n\n        removeContinent({ variables });\n\n        const [, { loading }] = result.current;\n\n        expect(loading).toBe(true);\n\n        await waitForNextUpdate();\n\n        const [, { data }] = result.current;\n\n        expect(data).toEqual(\n            expect.objectContaining({\n                removeContinent: 0,\n            })\n        );\n\n        const results = cache.readQuery({ query: Continents });\n\n        expect(results).toEqual(\n            expect.objectContaining({\n                continents: [\n                    ...allContinents.slice(1)\n                ],\n            })\n        );\n    });\n});\n```\n\nThis is the working mutation test can also cover the cache change as long as I know but if you have and good idea please let me know, thank you in advance.\n","tags":["pld","react","hooks","testing","apollo","graphql","mutation"],"categories":["React"]},{"title":"Implement Blueprintjs Table Infinite Scroll","url":"/2019/08/blueprintjs-table-infinite-scroll.html","content":"\nGenerally we use scroll event to detect if element reach to the threshold edge, or if you are familiar with [Intersection observer](/2019/03/intersection-observer.html){target=\"_blank\"}.\n\nBlueprintjs is a complex UI components set for React and in its table API document it doesn't explicitly provide the infinite scroll feature but we can use this API to approach.\n\n### API\n\n```\nonVisibleCellsChange\n\n(rowIndices: IRowIndices, columnIndices: IColumnIndices) => void\nA callback called when the visible cell indices change in the table.\n```\n\n### Codesandbox\n\n<iframe src=\"https://codesandbox.io/embed/blueprintjs-table-infinite-scroll-7lqbx?fontsize=14&module=%2Fsrc%2FTable.js&view=preview\" title=\"blueprintjs table infinite scroll\" allow=\"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media\" style=\"width:100%; height:600px; border:0; border-radius: 4px; overflow:hidden;\" sandbox=\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"></iframe>\n","tags":["pld","react","infinite-scroll","blueprintjs"],"categories":["React"]},{"title":"Writing Hooks Test of React Apollo","url":"/2019/07/writing-hooks-test-of-react-apollo.html","content":"\n### Hooks\nReact introduce hooks in version 16.8.0 we don't have to choose which type of components to use just function components.\n\n> Add Hooks â€” a way to use state and other React features without writing a class.{.blockquote}\n\nAnd react-apollo@3 also introduce hooks feature to acquire data from Graphql API.\n\n<!-- more -->\n\nGenerally we using like [this](https://www.apollographql.com/docs/react/essentials/queries/#the-query-component){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\nOn last October their [post](https://github.com/apollographql/react-apollo/issues/2539){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"} show us a new way to use the response.\n\nHooks\n```javascript\n// filename: hooks/useDogs.js\nimport gql from 'graphql-tag';\nimport { useQuery } from 'react-apollo';\n\nconst GET_DOGS = gql`\n  {\n    dogs {\n      id\n      breed\n    }\n  }\n`;\n\nexport const useDogs = () => useQuery(GET_DOGS);\n```\n\nComponent\n```javascript\nimport { useDogs } from 'hooks/useDogs';\n\nconst Dogs = ({ onDogSelected }) => {\n  const { loading, error, data } = useDogs();\n\n  if (loading) return 'Loading...';\n\n  if (error) return `Error! ${error.message}`;\n\n  return (\n    <select name='dog' onChange={onDogSelected}>\n      {data.dogs.map(dog => (\n        <option key={dog.id} value={dog.breed}>\n          {dog.breed}\n        </option>\n      ))}\n    </select>\n  )\n};\n```\n\nWell you can find lots of articles to show how to use react-apollo hooks and this one will provide you how to write your hooks' test for custom hooks _useDogs_.\n\n### Test\n\nWe are going to use [react-hooks-testing-library](https://www.npmjs.com/package/@testing-library/react-hooks){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"} and [react-apollo testing suite](https://www.npmjs.com/package/@apollo/react-testing){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"} to do the test please make sure the dependencies are installed.\n\nDependencies\n* react: ^16.8.5\n* react-dom: ^16.8.5\n* react-apollo: ^3.0.0-beta.3\n\ndevDenpendencies\n* react-test-renderer: ^16.8.6\n* @apollo/react-testing: 0.1.0-beta.5\n* @testing-library/react-hooks: ^1.0.4\n\n```javascript\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { renderHook } from '@testing-library/react-hooks';\nimport { MockedProvider } from '@apollo/react-testing';\n\nimport { useDogs } from 'hooks/useDogs';\n\nconst GET_DOGS = gql`\n  {\n    dogs {\n      id\n      name\n      breed\n    }\n  }\n`;\n\ndescribe('useDogs', () => {\n  it('should get dogs', async () => {\n    const mocks = [\n      {\n        request: { query: GET_DOGS },\n        result: { data: { dogs: [{ id: '1', name: 'Buck', breed: 'bulldog' }] } },\n      },\n    ];\n\n    const wrapper = ({ children }) => (\n      <MockedProvider mocks={mocks}>{children}</MockedProvider>\n    );\n\n    const { result, waitForNextUpdate } = renderHook(() => useDogs(), {\n      wrapper,\n    });\n\n    expect(result.current.loading).toBe(true);\n\n    await waitForNextUpdate();\n\n    expect(result.current.data).toEqual(\n      expect.objectContaining({\n        dogs: [\n          { id: '1', name: 'Buck', breed: 'bulldog' },\n        ],\n      })\n    );\n  });\n});\n```\n","tags":["pld","react","hooks","testing"],"categories":["React"]},{"title":"Applications of Intersection Observer API","url":"/2019/03/intersection-observer.html","content":"\n> The IntersectionObserver interface of the Intersection Observer API provides a way to **asynchronously** observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport. The ancestor element or viewport is referred to as the root.{.blockquote}\n\n> When an IntersectionObserver is created, it's configured to watch for given ratios of visibility within the root. The configuration cannot be changed once the IntersectionObserver is created, so a given observer object is only useful for watching for specific changes in degree of visibility; however, you can watch multiple target elements with the same observer.{.blockquote}\n\n> -- MDN [IntersectionObserver](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserver){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n{.blockquote .text-right .mb-3}\n\n<!-- more -->\n\n### 1. Lazyload\nTraditionally we are using _onscroll_ event in _window_ to handle lazyload, usually lazyload image source to accelerate page loading to accomplish the concept of [Critical Rendering Path](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}. Anything not visible within the \"initial view\" we can lazy load it afterwards.\n\nHere is the code snippet using IntersectionObserver API to lazyload _&lt;img&gt;_\n```html\npicture.lazy-image\n    source(media=\"(max-width: 767px)\" srcset=\"/images/blank.gif\" data-src=\"/images/mobile.png\")\n    img(src=\"/images/blank.gif\" data-src=\"/images/pc.jpg\")\n```\n\n```javascript\n// lazyloader.js\n// polyfill for non-supported browsers\nimport 'intersection-observer'\n\nexport default function() {\n    const lazyImgs = Array.from(document.querySelectorAll('picture.lazy-image'))\n\n    const doLoad = (picture) => {\n        const srcset = picture.querySelector('source')\n        const img = picture.querySelector('img')\n\n        if (img) {\n            img.setAttribute('src', img.dataset.src)\n        }\n        if (srcset) {\n            srcset.setAttribute('srcset', srcset.dataset.src)\n        }\n\n        picture.classList.add('lazy-image--loaded')\n    }\n\n\n    const io = new IntersectionObserver((imgs, observer) => {\n        imgs.forEach((img) => {\n            if (img.isIntersecting) {\n                doLoad(img.target)\n                observer.unobserve(img.target)\n            }\n        })\n    })\n\n    lazyImgs.forEach((image) => {\n        io.observe(image)\n    })\n}\n```\n\nNow with above snippets we can already load image source when scroll to the _&lt;picture&gt;_ tag but there is an obviously FOUC(flash of unstyled content).\n\n![FOUC](/assets/images/page-lazyload-images-1.gif){.img-fluid}\n\n[check this reference blog to fix it.](http://davidecalignano.it/lazy-loading-with-responsive-images-and-unknown-height/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\n![Fixed FOUC](/assets/images/page-lazyload-images-2.gif){.img-fluid}\n\n```scss\n.lazy-image {\n    position: relative;\n    display: block;\n    overflow: hidden;\n    padding-bottom: 110%;\n\n    img {\n        position: absolute;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: auto;\n        opacity: 0;\n        transition: opacity .2s;\n    }\n\n    &--loaded {\n        img {\n            opacity: 1;\n        }\n    }\n}\n```\n\n### 2. Sticky Navigation/Menu/etc.{.mt-3}\n\n_position: sticky_ is available in the selectors' container if I want a _&lt;nav&gt;_ always sticky in the top of the page I need to make it as the child of _&lt;body&gt;_ tag or a content container, if this is not the design create a sticky navigation and put it as the child of the container and not visible until when the fixed navigation is not visible then show the sticky navigation. Still _onscroll_ can do this but we are using IntersectionObserver today.\n\n```javascript\nconst stickyNavigation = () => {\n    const nav = document.querySelector('nav.sticky-navigation')\n    const io = new IntersectionObserver((nav) => {\n        const target = nav[0]\n\n        if (target) {\n            const clientRect = target.boundingClientRect\n            const root = target.rootBounds\n\n            if (clientRect.bottom < root.top) {\n                // show the sticky navigation\n                nav.classList.add('sticky-navigation--visible')\n            }\n\n            if (clientRect.height + clientRect.top > 0) {\n                // hide the sticky navigation\n                nav.classList.remove('sticky-navigation--visible')\n            }\n        }\n    }, {\n        // observer callback will be executed when ratio reach\n        // 0%, 25%, 50%, 75%, 100%\n        threshold: [0, 0.25, 0.5, 0.75, 1]\n    })\n\n    io.observe(nav)\n}\n```\n\n```scss\n.sticky-navigation {\n    position: sticky;\n    top: 0;\n    display: none;\n\n    &--visible {\n        display: block;\n    }\n}\n```\n\nHere are two example for using both\n\n* <https://ebidel.github.io/demos/sticky-position-event.html>{rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* <https://codepen.io/danirod/pen/preJgX>{rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\n### Polyfill\n\nIE doesn't support both functions so we have polyfill for:\n* [IntersectionObserver](https://github.com/w3c/IntersectionObserver/tree/master/polyfill){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [position: sticky](https://github.com/wilddeer/stickyfill){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n","tags":["javascript","es6","intersection-Observer","css"],"categories":["PLD"]},{"title":"Dom manipulation with pure javaScript","url":"/2019/03/dom-manipulation-without-jquery.html","content":"\n##### 1. Select dom element\n```javascript\nconst elCls = document.querySelector('.className')\nconst elId = document.querySelector('#id')\nconst elTag = document.querySelector('div')\n```\n\n**querySelector** only get the first occurred element discard id element only have one there are multiple of class name and tag elements.\n\n##### 2. Select dom elements{.mt-5}\n```javascript\nconst elCls = document.querySelectorAll('.className')\nconst elTag = document.querySelectorAll('div')\n```\n\n**querySelectorAll** will get a NodeList of elements the NodeList is like a array but **forEach** is not usable in IE browser, so you could use below methods to convert to an array of elements.\n\n```javascript\nconst els = document.querySelector('.className')\nArray.from(els).forEach((dom) => {\n  // dom manipulation\n})\n\n// or\nArray.prototype.forEach.call(els, (dom) => {\n  // dom manipulation\n})\n\n// or\n[].slice.call(els).forEach((dom) => {\n  // dom manipulation\n})\n```\n\n<!-- more -->\n\n##### 3. Access dom data attribute{.mt-5}\n```javascript\n// <button id=\"submit\" data-disable=\"false\">Submit</button>\nconst el = document.querySelector('#submit')\nconst isDisablle = el.dataset.disable // \"false\"\n\nel.dataset.disable = true // data-disable=\"true\"\n```\n\n##### 4. Class name manipulation{.mt-5}\n```javascript\n// <button id=\"submit\" class=\"btn btn-primary\">Submit</button>\nconst el = document.querySelector('#submit')\n\n// add class\nel.classList.add('btn-disabled')\n// remove class\nel.classList.remove('btn-disabled')\n// toggle class\nel.classList.toggle('btn-disabled')\n\n// check el have specific class name\nel.classList.contains('btn-disabled')\n\n// or toggle class with condition\nconst isDisabled = el.classList.contains('btn-disabled')\nel.classList[isDisabled ? 'remove' : 'add']('btn-disabled')\n```\n\n##### 5. Append dom{.mt-5}\n```javascript\nconst cartContainer = document.querySelector('.cart-container')\nconst cart = 'my new cart item'\n\ncartContainer.insertAdjacentHTML('beforeend', `<li class=\"cart-item\">${cart}</li>`)\n```\n\n[Element.insertAdjacentHTML()](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML#Visualization_of_position_names){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\n##### 6. Remove dom{.mt-5}\n```javascript\n/*\n<ul class=\"cart-container\">\n  <li class=\"cart-item\">\n    cart A\n  </li>\n  <li class=\"cart-item\">\n    carr B\n  </li>\n</ul>\n*/\n// remove last item\nconst last = document\n  .querySelector('.cart-container')\n  .querySelector('.cart-item:last-child')\n\nlast.parentNode.removeChild(last)\n```\n\n##### 7. Event listening{.mt-5}\n```javascript\n// <button id=\"submit\" data-disable=\"false\">Submit</button>\nconst btn = document.querySelector('#submit')\n\nbtn.addEventListener('click', (evt) => {\n  evt.preventDefault()\n  evt.stopPropagation()\n  evt.stopImmediatePropagation()\n\n  btn.classList.add('clicked')\n})\n\n// bind to multiple doms\nArray.from(document.querySelector('.cart-container').querySelectorAll('.cart-item-delete'))\n  .forEach((deleteBtn) => {\n  deleteBtn.addEventListener('click', (evt) => {\n    evt.preventDefault()\n\n    const cartItemRow = deleteBtn.parentNode\n    cartItemRow.parentNode.removeChild(cartItemRow)\n  })\n})\n\n// event delegation\ndocument.querySelector('.cart-container')\n  .addEventListener('click', (evt) => {\n    if (evt.target.matches('.cart-item')) {\n      // event handler\n    }\n  })\n\n// event listener remove\nconst listener = (evt) => {\n  // event handler\n}\n\nconst btn = document.querySelector('#submit')\n\nbtn.addEventListener('click', listener)\nbtn.removeEventListener('click', listener)\n\n// trigger event handler\nconst event = new CustomEvent('click');\n// or\nconst event = new CustomEvent('myEvt', { 'detail': elem.dataset.time })\n\nel.dispatchEvent(event)\n```\n[Element.matches polyfill](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches#Polyfill){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\n[Custom event and data](https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events#Adding_custom_data_%E2%80%93_CustomEvent())\n\n##### 8. Utility functions{.mt-5}\n\n[A Year Without jQuery - Helper Functions](https://blog.wearecolony.com/a-year-without-jquery/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n```javascript\n/**\n * @param   {Element}       el\n * @param   {string}        selector\n * @param   {boolean}       [includeSelf]\n * @return  {Element|null}\n */\n\nh.closestParent = function(el, selector, includeSelf) {\n    var parent = el.parentNode;\n\n    if (includeSelf && el.matches(selector)) {\n        return el;\n    }\n\n    while (parent && parent !== document.body) {\n        if (parent.matches && parent.matches(selector)) {\n            return parent;\n        } else if (parent.parentNode) {\n            parent = parent.parentNode;\n        } else {\n            return null;\n        }\n    }\n\n    return null;\n};\n```\n","tags":["jquery","javascript","dom","es6"],"categories":["PLD"]},{"title":"Install Latest LTS Nodejs on Ubuntu","url":"/2019/03/node-install-ubuntu.html","content":"\nOn a Ubuntu LTS environment usually when you use **apt-get install nodejs** you'll get 6.x version of node, if you want to install the latest LTS version of nodejs and don't want to compile from the source, here is the instruction.\n\n### Installing Node.js 10.x LTS on Ubuntu and Debian\n[![nodeSource](https://github.com/nodesource/distributions/raw/master/images/nsolid-logo-dark.svg?sanitize=true)](https://github.com/nodesource/distributions/blob/master/README.md){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\nFollow the install instructions of section **Debian and Ubuntu**\n{.mb-0 .mt-3}\n```bash\ncurl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n\nYou will install the latest LTS 10.x version of nodejs, this is the upgrade but if you need to downgrade it please uninstall\n{.mb-0 .mt-3}\n```bash\nsudo apt-get remove -y nodejs\n```\n\nbefore change the install version{.mb-0 .mt-3}\n```bash\ncurl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n{.mb-3}\n","tags":["ubuntu","nodejs"],"categories":["PLD"]},{"title":"Auto Issue Your Domain SSL by acme.sh","url":"/2019/02/acme.sh-auto-issue-ssl.html","content":"\n###### Fri Mar 1 17:54:57 CST 2019\n\n[acme.sh](https://github.com/Neilpang/acme.sh){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\n[acme.sh wiki](https://github.com/Neilpang/acme.sh/wiki){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\n[ä¸­æ–‡æ•™ç¨‹](https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\n### Issue a SSL cert from Let's Encrypt\n\n### Install cert to your site\n\n### Make it auto updated\n","tags":["ubuntu"],"categories":["SSL"]},{"title":"Integrate Frontend Build Tasks into Maven","url":"/2019/01/maven-integrate-frontend-build-tasks.html","content":"\nSometimes when build a maven project you also want frontend resources are built along with whole build process, here is the solution.\n\n### TL;DR\n\n* Apache Maven 3.3.9\n* Plugin: frontend-maven-plugin 1.6\n* A pom.xml profile (e.g. for an AEM project)\n* Build command add the profile before other profiles\n* Check console if the gulp task is run successfully\n\n<!-- more -->\n\n## Longer version\n\nMake sure you have the right version of maven and plugin then add the configure into your pom.xml\n\n```xml\n<profile>\n    <id>buildPLD</id>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.github.eirslett</groupId>\n                <artifactId>frontend-maven-plugin</artifactId>\n                <version>1.6</version>\n                <configuration>\n                    <workingDirectory>folder/of/frontend/src/with/gulp/tasks</workingDirectory>\n                </configuration>\n                <executions>\n                    <!-- install node and yarn -->\n                    <execution>\n                        <id>install node and yarn</id>\n                        <goals>\n                            <goal>install-node-and-yarn</goal>\n                        </goals>\n                        <phase>generate-resources</phase>\n                        <configuration>\n                            <nodeVersion>v10.0.0</nodeVersion>\n                            <yarnVersion>v1.13.0</yarnVersion>\n                        </configuration>\n                    </execution>\n                    <!-- install package.json dependencies -->\n                    <execution>\n                        <id>run yarn install</id>\n                        <goals>\n                            <goal>yarn</goal>\n                        </goals>\n                        <configuration>\n                            <arguments>install</arguments>\n                        </configuration>\n                    </execution>\n                    <!-- run gulp task -->\n                    <execution>\n                        <id>run gulp</id>\n                        <goals>\n                            <goal>yarn</goal>\n                        </goals>\n                        <configuration>\n                            <arguments>run deploy</arguments>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</profile>\n```\n\n### Command\n```plain\nmvn clean install -P buildPLD\n```\n\n### Console\n```log\n[INFO] --- frontend-maven-plugin:1.6:install-node-and-yarn (install node and yarn) @ apps ---\n[INFO] Node v10.0.0 is already installed.\n[INFO] Yarn 1.13.0 is already installed.\n[INFO]\n[INFO] --- frontend-maven-plugin:1.6:yarn (run yarn install) @ apps ---\n[INFO] Running 'yarn install' in folder/of/frontend/src/with/gulp/tasks\n[INFO] yarn install v1.13.0\n[INFO] [1/4] Resolving packages...\n[INFO] success Already up-to-date.\n[INFO] Done in 0.74s.\n[INFO]\n[INFO] --- frontend-maven-plugin:1.6:yarn (run gulp) @ apps ---\n[INFO] Running 'yarn run deploy' in folder/of/frontend/src/with/gulp/tasks\n[INFO] yarn run v1.13.0\n[INFO] $ gulp build --require @babel/register --gulpfile gulp-tasks\n```\n\nHere you can see console logs out specific version of Node and Yarn is installed but for the first time you run it the plugin will download specific version of node and yarn and install to your ${workingDirectory}/node, this is happened in the first execution section. The other two execution sections are mainly for download task dependencies and run specific task and you can see the last line of log the gulp task is running.\n\n#### Done.\n","tags":["pld","maven"],"categories":["Integration"]},{"title":"PLD Troubleshooting","url":"/2019/01/pld-troubleshooting.html","content":"\n###### Tue Jan 22 17:33:22 CST 2019\n\n### IE\n\n* Remove the clear cross icon in input\n\n    ```css\nselector::-ms-clear {\n    display: none;\n}\n    ```\n* Image is displayed in other browsers except IE\n\n    E.g. a .png extension image shown in Chrome but not shown in IE, when open it directly in IE also display a red cross. You should check the image is really a png image by using [CheckFileType.com](http://www.checkfiletype.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"} and rename it then both in page and direct will show.\n\n<!-- more -->\n\n### iOS Safari\n\n* Input has inner shadow\n\n    ```css\nselector {\n    -webkit-appearance: none;\n}\n    ```\n\n* Non &lt;a&gt; or &lt;button&gt; tag does't response the click event\n\n    ```css\nselector {\n    cursor: pointer;\n}\n    ```\n\n","tags":["pld","tricks"],"categories":["PLD"]},{"title":"Bookmarks of Frontend(PLD) Related","url":"/2018/11/bookmarks.html","content":"\nFoundation{.mb-0}\n\n* [VS Code](https://code.visualstudio.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Code guide](http://codeguide.co/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [EditorConfig](https://editorconfig.org/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\n<!-- more -->\n\nApps{.mb-0}\n\n* [Fontello - icon fonts generator](http://fontello.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [IcoMoon App - Icon Font, SVG, PDF & PNG Generator](https://icomoon.io/app/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [The SVG Font Machine](https://glyphter.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [RegExr: Learn, Build, & Test RegEx](https://regexr.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Paletton - The Color Scheme Designer](http://paletton.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [loading.io - Your SVG + GIF + PNG Ajax Loading Icons](https://loading.io/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Online Markdown Editor - Dillinger, the Last Markdown Editor ever.](https://dillinger.io/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Free email template builder - Responsive mail editor and designer](https://mosaico.io/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Random User Generator](https://randomuser.me/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [JavaScript Event KeyCodes](http://keycode.info/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Lorem Ipsum - All the facts - Lipsum generator](https://www.lipsum.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Password Generator](https://www.lastpass.com/password-generator){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [data: URI Generator](https://dopiaza.org/tools/datauri/index.php){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [CSS3 Keyframes Animation Generator](http://cssanimate.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [CheckFileType.com](http://www.checkfiletype.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Create React Content Loader](http://danilowoz.com/create-content-loader/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [TypeScript Types Search](http://microsoft.github.io/TypeSearch/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [The ultimate favicon generator](https://favicon.io/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [SVG Backgrounds](https://www.svgbackgrounds.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\nCheat Sheets{.mb-0}\n\n* [Devhints â€” TL;DR for developer documentation](https://devhints.io/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Easing functions](https://easings.net/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\nMiscs{.mb-0}\n\n* [Can I use](https://www.caniuse.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Browserhacks](http://browserhacks.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Media Queries](https://mediaqueri.es/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\n* [HTML Entity List](https://www.freeformatter.com/html-entities.html){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Character Entity Reference Chart](https://dev.w3.org/html5/html-author/charref){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Control character â€” UnicodeÂ® character table](https://unicode-table.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\n* [UNPKG](https://unpkg.com/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n\nPlugins{.mb-0}\n\n* Carousels\n  * [Swiper](http://idangero.us/swiper/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n  * [Slick](http://kenwheeler.github.io/slick/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* Form Validator\n  * [Parsley](http://parsleyjs.org/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n  * [Validator](http://1000hz.github.io/bootstrap-validator/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n* [Virtual Keyboard](https://mottie.github.io/Keyboard/){rel=\"external nofollow noopener noreferrer\"}{target=\"_blank\"}\n","tags":["pld","resource"],"categories":["Bookmarks"]},{"title":"About","url":"/about/index.html","content":"\n![gravatar](//www.gravatar.com/avatar/156cc3e5c4d53aa96837c360e9194970){.gravatar} A presentation layer developerâ€™s blog\n\n---\n\n[Click to register you own VPS](https://www.linode.com/?r=3cc0f128d017211636d893bb469abcf2078499f4){target=\"_blank\"}, only **$5** per month and youâ€™ll have **25GB SSD** storage than 20GB before NOW.\n\nTo register you can use below *Discount Code* to get *$10* to try linode for **Free** when you Complete Signup and input it to Promotion Code.\n\n**Discount Code**: DOCS10\n\n**Referral Code**: **3cc0f128d017211636d893bb469abcf2078499f4**\n{.text-break}\n"}]